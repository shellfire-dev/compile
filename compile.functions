# This file is part of compile. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/compile/master/COPYRIGHT. No part of compile, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015 The developers of compile. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/compile/master/COPYRIGHT.


core_usesIn cpucount
core_dependency_requires 'Homebrew' brew
compile_initialiase()
{
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	_compile_temporaryBuildScript="$TMP_FILE"
	
	cpucount_computeMakeJobsAndLoadAverage 0 10
	
	# Problem: Mac OS X compilation is borked; need to use brew sh
	if core_compatibility_whichNoOutput brew; then
		_compile_useHomebrew=true
	else
		_compile_useHomebrew=false
	fi
}

core_dependency_requires '*' sh
core_dependency_requires 'Homebrew' cat
compile_executionScript()
{
	local sourcePath="$1"
	local destinationPath="$2"
	local commandFunction="$3"
	
	compile_c_reset
	
	if $_compile_useHomebrew; then
		cat >"$_compile_temporaryBuildScript" <<-EOF
			set -e
			set -u
			set -f
			cd $(core_variable_escapeSingleQuotes "$sourcePath")
		EOF
	
		$commandFunction >>"$_compile_temporaryBuildScript"
		
		printf '%s\n' "sh '$(core_variable_escapeSingleQuotes "$_compile_temporaryBuildScript")'" | brew sh
	else
		pushd "$sourcePath"
		
			$commandFunction
			
		popd
	fi
}

compile_escapedCommandLine()
{
	if ! $_compile_useHomebrew; then
		"$@"
		return 0
	fi
	
	local afterFirst=false
	local argument
	for argument in "$@"
	do
		if $afterFirst; then
			printf ' '
		else
			afterFirst=true
		fi
		printf "'"
		core_variable_escapeSingleQuotes "$argument"
		printf "'"
	done
	
	printf '\n'
}

# Note: We are now able to bootstrap make
core_dependency_requires '*' make
compile_escapedCommandLineMake()
{
	core_variable_escapedCommandLine make -l $cpucount_makeLoadAverage -j $cpucount_makeJobs "$@"
}
